
UTest({
	'await': function(){
		
		var await = A.assert.await('foo', 2);
		
		eq(A.assert.callbacks.length, 1);
		eq(A.assert.callbacks[0].count, 2);
		eq(A.assert.callbacks[0].name, 'foo');
		
		await();
		eq(A.assert.callbacks.length, 1);
		eq(A.assert.callbacks[0].count, 1);
		
		await();
		eq(A.assert.callbacks.length, 0);
	},
	
	'avoid': function(){
		
		var fn = assert.await('avoided', function(key){
			eq_(key, 'foo');
		}, 2);
		
		var avoid = A.assert.avoid('foo', fn, 1),
			error;
		
		is_(avoid, 'Function');
		avoid('foo'); // accept one call
		avoid('foo'); // avoid further calls
		
		eq_(A.assert.callbacks.length, 1);
		
		// clean
		A.assert.callbacks = [];
	}
	
});