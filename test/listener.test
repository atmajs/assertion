UTest({
	
	'error listener': function(){
		
		function fail(error) {
			_fail();
			notEq(error.message.indexOf(expect), -1);
			assert(error instanceof A.assert.AssertionError)
		}
		function start(){
			_start();
		}
		function success(){
			_success();
		}
		
		var _start = assert.await(4),
			_success = assert.await(1),
			_fail = assert.await(2),
			expect;
		
		A.assert.on('start', start);
		A.assert.on('fail', fail);
		A.assert.on('success', success);
		
		//> fail
		expect = 'String not equal';
		A.assert.eq_('a', 'b', expect);
		
		//> fail
		expect = 'Array not equal';
		A.assert.deepEq_([3], [2, 3], expect);
		
		//> success
		A.assert.has_('foo', 'oo');
		
		
		A.assert.off('fail', fail);
		
		//> throw
		var errorFn = assert.await();
		try {
			A.assert.has_('one', 'eno');
		} catch(error) {
			assert(error instanceof A.assert.AssertionError);
			errorFn();
		}
	}
	
})