UTest({
	
	'message': function(){
		
		function testMsg(actual, expected) {
			try {
				A.assert.equal(actual, '');
			} catch (e) {
				eq(e.toString(), ['AssertionError:', expected, '==', '""'].join(' '));
				
				assert.ok(e.generatedMessage, "Message not marked as generated");
			}
		}
		
		testMsg(undefined, '"undefined"');
		testMsg(null, 'null');
		testMsg(true, 'true');
		testMsg(false, 'false');
		testMsg(0, '0');
		testMsg(100, '100');
		testMsg(NaN, '"NaN"');
		testMsg(Infinity, '"Infinity"');
		testMsg(-Infinity, '"-Infinity"');
		testMsg('', '""');
		testMsg('foo', '"foo"');
		testMsg([], '[]');
		testMsg([1, 2, 3], '[1,2,3]');
		testMsg(/a/, '"/a/"');
		testMsg(/abc/gim, '"/abc/gim"');
		testMsg(function f() {}, '"function f() {}"');
		testMsg({}, '{}');
		testMsg({a: undefined, b: null}, '{"a":"undefined","b":null}');
		testMsg({a: NaN, b: Infinity, c: -Infinity},
			'{"a":"NaN","b":"Infinity","c":"-Infinity"}');
	}
})